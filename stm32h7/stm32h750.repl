//Memories
flashController: MTD.STM32H7_FlashController @ sysbus 0x52002000
    flash1: flash0
    flash2: flash1

flash0: Memory.MappedMemory @ sysbus 0x08000000
    size: 0x00040000

flash1: Memory.MappedMemory @ sysbus 0x90000000
    size: 0x10000000

sram1: Memory.MappedMemory @ sysbus 0x30000000
    size: 0x00048000

sram2: Memory.MappedMemory @ sysbus 0x38000000
    size: 0x00010000

iram3: Memory.MappedMemory @ sysbus 0x24000000
    size: 0x00080000

fmc_ram: Memory.MappedMemory @ sysbus 0xC0000000
    size: 0x02000000



crc: CRC.STM32_CRC @ sysbus 0x58024C00
    series : STM32Series.WBA
    configurablePoly: true





/*Simu Python de l'USB*/
usb1_otg_hs: Miscellaneous.USB_HOST @ sysbus 0x40040000

usb1_otg_fs: Miscellaneous.USB_HOST @ sysbus 0x40080000


/*Simu Python de l'QSPI (la flash externe mappee directe)*/
qspi: Python.PythonPeripheral @ sysbus 0x52005000
    size: 0x1000
    initable: true
    script: '''
if request.isInit:
   lastVal = 0
   data = {'tc': 1, 'tf': 1 ,'other':0}
   id = [0x18, 0xBA, 0x20]
   idx = 2

if request.isWrite:
    if request.offset == 0x0:
        # HSION [doc = "Bit 0 - HSI16 clock enable"]
        data['other'] = (request.value >> 0) & 0x1
    elif request.offset == 0x20:
        data['tf'] = (request.value >> 3) & 0x1
        data['tc'] = (request.value >> 1) & 0x1
elif request.isRead:
    if request.offset == 0x0:
        request.value = ( 0x1 |  0x3 << 28 )
    elif request.offset == 0x8:
        request.value = 0X1 << 3 | 0X1 << 2 | 0X1 << 1
    elif request.offset == 0x10:
        request.value = 0X02
    elif request.offset == 0x20:
        request.value = id[idx]
        if idx > 0 :
            idx -= 1
'''




sysbus:
    init:
        //Tag <0x40080000, 0x400BFFFF> "USB2_OTG_FS:RESET" 0x80000000
        //Tag <0x40040000, 0x4007FFFF> "USB1_OTG_HS:RESET" 0x80000000
        ApplySVD @C:\ST\STM32CubeCLT_1.15.1\STMicroelectronics_CMSIS_SVD\STM32H750.svd
